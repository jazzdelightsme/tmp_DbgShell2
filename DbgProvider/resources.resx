<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>

  <!-- Verbose strings -->

  <!-- Warning strings -->
  <data name="WarningBadActivityIdFmt" xml:space="preserve">
    <value>The parent activity ID of {0} is not the ID of an existing activity. This probably indicates a problem with the plug-in that you are using.</value>
    <comment>Warning output. {0} is an activity ID (an integer).</comment>
  </data>

  <!-- ProgressRecord.Activity strings -->

  <!-- ProgressRecord.StatusDescription strings -->

  <!-- Error messages: for users -->
  <data name="ErrMsgSeeErrorRecord" xml:space="preserve">
    <value>Examine the ErrorRecord field for more information.</value>
    <comment>Error message (for end user).</comment>
  </data>
  <data name="ErrMsgCouldNotStartLoggingFmt" xml:space="preserve">
    <value>Could not start diagnostic trace session: {0}</value>
    <comment>DRAFT; Error message (for end user). {0} is one ore more external exception messages.</comment>
  </data>
  <data name="ErrMsgTraceFailureFmt" xml:space="preserve">
    <value>An error occurred while saving diagnostic information to the file {0}: {1}</value>
    <comment>Error message (for end user). {0} is a debug trace file name. {1} is one or more external error messages.</comment>
  </data>
  <data name="ErrMsgTracingFailed" xml:space="preserve">
    <value>The debug trace file cannot be saved because debug tracing failed to initialize.</value>
    <comment>Error message (for end user).</comment>
  </data>
  <data name="ErrMsgCouldNotSaveTraceFmt" xml:space="preserve">
    <value>Failed to save the trace log to "{0}": {1}</value>
    <comment>Error message (for end user). {0} is a file name/path. {1} is one or more exception messages.</comment>
  </data>
  <data name="ErrMsgTraceFileAlreadyExistsFmt" xml:space="preserve">
    <value>The destination trace file already exists ("{0}"). Use -Force to overwrite it.</value>
    <comment>Error message (for end user). {0} is a file name/path. Do not localize "-Force".</comment>
  </data>
  <data name="ErrMsgCannotCreateSubkeyFmt" xml:space="preserve">
    <value>Failed to create subkey "{0}\{1}".</value>
    <comment>Error message (for end user). {0}\{1} is a registry path.</comment>
  </data>
  <data name="ErrMsgCreateFileFailedFmt" xml:space="preserve">
    <value>Could not create or open file "{0}".</value>
    <comment>DRAFT; Error message (for end user). {0} is a file name.</comment>
  </data>
  <data name="ErrMsgUnhandledExceptionFmt" xml:space="preserve">
    <value>The '{0}' cmdlet stopped working. Additional information: {1}</value>
    <comment>Error message (for end user). Only used in the event of an unexpected exception. {0} is the name of a cmdlet. {1} is an exception.</comment>
  </data>

  <!-- Exception messages: for developers -->
  <data name="ExMsgEndOfInnerExceptionStack" xml:space="preserve">
    <value>End of inner exception stack trace</value>
    <comment>Exception message (for developer). There is no period at the end, that is deliberate.</comment>
  </data>
  <data name="ExMsgInvalidRegistryDataFmt" xml:space="preserve">
    <value>Invalid registry data value "{0}".</value>
    <comment>Exception message (for developer). {0} the name of a registry value.</comment>
  </data>
  <data name="ExMsgCallbackDisposedFmt" xml:space="preserve">
    <value>This callback object is no longer active (type {0}).</value>
    <comment>Exception message (for developer). {0} is the type of callback object.</comment>
  </data>

  <!-- ShouldProcess / ShouldContinue strings -->

  <!-- Other miscellaneous strings -->
</root>
